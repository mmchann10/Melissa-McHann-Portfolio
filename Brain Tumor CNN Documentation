Documentation for BrainTumorCNN Code
Overview
The BrainTumorCNN class is designed to classify brain tumor images into four categories: glioma, meningioma, notumor, and pituitary. It uses a Convolutional Neural Network (CNN) architecture built with TensorFlow/Keras. The class includes methods for building, compiling, training, evaluating, and visualizing the model's performance.
 
Class: BrainTumorCNN
Constructor: __init__(self, input_shape=(224, 224, 3), num_classes=4)
•	Description: Initializes the class with input shape and number of output classes.
•	Parameters:
o	input_shape: Tuple specifying the shape of input images (default: (224, 224, 3)).
o	num_classes: Number of output classes (default: 4).
 
Method: conv_block(self, filters, kernel_size=(3, 3), dropout_rate=0.25)
•	Description: Creates a convolutional block consisting of convolutional layers, batch normalization, max pooling, and dropout.
•	Parameters:
o	filters: Number of filters for the convolutional layers.
o	kernel_size: Size of the convolutional kernel (default: (3, 3)).
o	dropout_rate: Dropout rate for regularization (default: 0.25).
•	Returns: A list of layers forming the convolutional block.
 
Method: build_model(self)
•	Description: Builds the CNN architecture optimized for brain tumor classification.
•	Returns: A compiled Keras Sequential model.
 
Method: compile_model(self, learning_rate=0.001)
•	Description: Compiles the model with the Adam optimizer, categorical crossentropy loss, and evaluation metrics (accuracy, precision, recall).
•	Parameters:
o	learning_rate: Learning rate for the optimizer (default: 0.001).
•	Returns: The compiled model.
 
Method: create_data_generators(self, train_dir, test_dir, batch_size=32)
•	Description: Creates data generators for training, validation, and testing with augmentation applied to training data.
•	Parameters:
o	train_dir: Path to the training dataset directory.
o	test_dir: Path to the testing dataset directory.
o	batch_size: Batch size for data generators (default: 32).
•	Returns: Tuple containing training, validation, and testing data generators.
 
Method: get_callbacks(self)
•	Description: Defines callbacks for training, including early stopping, learning rate reduction, and model checkpointing.
•	Returns: A list of Keras callbacks.
 
Method: train(self, train_generator, validation_generator, epochs=50)
•	Description: Trains the model using the provided data generators and callbacks.
•	Parameters:
o	train_generator: Training data generator.
o	validation_generator: Validation data generator.
o	epochs: Number of training epochs (default: 50).
•	Returns: Training history object.
 
Method: plot_training_history(self)
•	Description: Plots training and validation accuracy and loss over epochs.
•	Returns: None.
 
Method: evaluate(self, test_generator)
•	Description: Evaluates the model on the test dataset and generates a classification report and confusion matrix.
•	Parameters:
o	test_generator: Testing data generator.
•	Returns: Tuple containing predictions and classification report.
 
Function: main()
•	Description: Demonstrates the usage of the BrainTumorCNN class by building, training, and evaluating the model.
•	Returns: An instance of the trained BrainTumorCNN model.
 
Results: Classification Report
Summary of Model Performance:
•	Accuracy: The model achieved an overall accuracy of 87% on the test dataset.
•	Precision: Indicates the proportion of correctly predicted positive observations.
o	Best precision: glioma (91%).
•	Recall: Indicates the proportion of actual positives correctly identified.
o	Best recall: notumor (99%).
•	F1-Score: Harmonic mean of precision and recall.
o	Best F1-score: notumor (93%).
Class	Precision	Recall	F1-Score	Support
Glioma	0.91	0.86	0.89	300
Meningioma	0.85	0.62	0.72	306
Notumor	0.88	0.99	0.93	405
Pituitary	0.85	1.00	0.92	300
Detailed Metrics:
Overall Metrics:
•	Macro Average: Precision: 0.87, Recall: 0.86, F1-Score: 0.86.
•	Weighted Average: Precision: 0.87, Recall: 0.87, F1-Score: 0.87.
 
Confusion Matrix
The confusion matrix visualizes the model's predictions versus actual labels. It highlights areas where the model performs well and where it struggles.
 
Conclusion
The BrainTumorCNN model demonstrates strong performance in classifying brain tumor images, particularly for the notumor and pituitary classes. However, the recall for meningioma could be improved, suggesting potential areas for further optimization, such as additional data augmentation or hyperparameter tuning.


